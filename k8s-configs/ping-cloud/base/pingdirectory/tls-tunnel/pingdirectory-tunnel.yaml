# This patch may be applied to the pingdirectory statefulset to start up a sidecar container that'll tunnel TLS
# traffic. Since nginx is simply a web proxy and cannot handle proxying anything but HTTPS traffic, this is necessary
# for the pingdirectory LDAPS server.
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pingdirectory
spec:
  template:
    spec:
      containers:
      - name: stunnel
        image: dweomer/stunnel
        imagePullPolicy: Always
        command:
        - sh
        - -c
        - |

          echo "Installing kubectl"
          wget https://storage.googleapis.com/kubernetes-release/release/v1.15.0/bin/linux/amd64/kubectl -P /usr/local/bin
          chmod +x /usr/local/bin/kubectl

          echo "Configuring stunnel environment variables"
          STUNNEL_BASE_DIR=/stunnel
          STUNNEL_CONF_FILE=${STUNNEL_BASE_DIR}/stunnel.conf

          STUNNEL_PID_DIR=/var/run/stunnel
          STUNNEL_PID_FILE=${STUNNEL_PID_DIR}/stunnel.pid

          STUNNEL_LOG_DIR=/var/log/stunnel
          STUNNEL_LOG_FILE=${STUNNEL_LOG_DIR}/stunnel.log

          STUNNEL_CA_FILE=/etc/ssl/certs/ca-certificates.crt

          STUNNEL_CRT_FILE=${STUNNEL_BASE_DIR}/tls.crt
          STUNNEL_KEY_FILE=${STUNNEL_BASE_DIR}/tls.key

          mkdir -p ${STUNNEL_BASE_DIR} ${STUNNEL_PID_DIR} ${STUNNEL_LOG_DIR}

          echo "Creating initial stunnel key-pair in file ${STUNNEL_CRT_FILE} and ${STUNNEL_KEY_FILE}"
          openssl req -x509 -nodes -newkey rsa:2048 -days 365 -subj '/CN=stunnel' \
             -keyout ${STUNNEL_KEY_FILE} -out ${STUNNEL_CRT_FILE}
          chmod 600 ${STUNNEL_KEY_FILE}

          echo "Setting up stunnel config file ${STUNNEL_CONF_FILE}"

          cat > ${STUNNEL_CONF_FILE} <<EOF
          pid = ${STUNNEL_PID_FILE}

          debug = 7
          output = ${STUNNEL_LOG_FILE}

          cert = ${STUNNEL_CRT_FILE}
          key = ${STUNNEL_KEY_FILE}

          socket = l:TCP_NODELAY=1
          socket = r:TCP_NODELAY=1

          CAfile = ${STUNNEL_CA_FILE}
          verifyChain = no

          foreground = yes
          client = no

          [ldaps]
          accept = 5678
          connect = localhost:${LDAP_PORT}
          delay = no
          TIMEOUTbusy = -1
          EOF

          echo "Updating stunnel CA and identity certificates"
          cp -v ${STUNNEL_CA_FILE} /usr/local/share/ca-certificates/stunnel-ca.crt
          cp -v ${STUNNEL_CRT_FILE} /usr/local/share/ca-certificates/stunnel.crt
          update-ca-certificates

          echo "Creating the periodic script to get the ACME certificate"
          FETCH_CERT_SCRIPT=${STUNNEL_BASE_DIR}/fetch-cert.sh

          cat > ${FETCH_CERT_SCRIPT} <<EOF
          echo "Reload cron job last ran at \$(date)" > /tmp/cron.log

          SECRET_FILE=\$(mktemp)
          kubectl get secret acme-tls-cert -o yaml > \${SECRET_FILE}

          if grep -q 'tls.crt' \${SECRET_FILE}; then
            TEMP_CRT_FILE=\$(mktemp)
            TEMP_KEY_FILE=\$(mktemp)

            grep 'tls.crt' \${SECRET_FILE} | cut -d: -f2 | base64 -d > \${TEMP_CRT_FILE}
            grep 'tls.key' \${SECRET_FILE} | cut -d: -f2 | base64 -d > \${TEMP_KEY_FILE}

            echo "Updating stunnel CA and identity certificates"
            chmod 600 \${TEMP_CRT_FILE}
            cp -v \${TEMP_CRT_FILE} /usr/local/share/ca-certificates/stunnel.crt
            update-ca-certificates

            mv \${TEMP_CRT_FILE} ${STUNNEL_CRT_FILE}
            mv \${TEMP_KEY_FILE} ${STUNNEL_KEY_FILE}

            PID=\$(pgrep stunnel)
            echo "stunnel process \${PID} running - sending it the HUP signal"
            kill -HUP \${PID}
          else
            echo "TLS secret not found"
          fi
          EOF

          chmod a+x ${FETCH_CERT_SCRIPT}

          echo "Adding a cron job to fetch the certificate every minute"
          crontab -l | { cat; echo "* * * * * sh ${FETCH_CERT_SCRIPT}"; } | crontab -
          crontab -l

          echo "Starting the cron daemon"
          crond
          ps -ef q

          echo "Starting stunnel"
          exec stunnel ${STUNNEL_CONF_FILE}

        ports:
        - containerPort: 5678
          name: stunnel
        envFrom:
        - configMapRef:
            name: pingdirectory-environment-variables